// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/users.proto

package usersv1protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yassi-github/s-progress/gen/users/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsersServiceName is the fully-qualified name of the UsersService service.
	UsersServiceName = "users.v1.UsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsersServiceCreateProcedure is the fully-qualified name of the UsersService's Create RPC.
	UsersServiceCreateProcedure = "/users.v1.UsersService/Create"
	// UsersServiceFindAllProcedure is the fully-qualified name of the UsersService's FindAll RPC.
	UsersServiceFindAllProcedure = "/users.v1.UsersService/FindAll"
	// UsersServiceFindProcedure is the fully-qualified name of the UsersService's Find RPC.
	UsersServiceFindProcedure = "/users.v1.UsersService/Find"
	// UsersServiceUpdateProcedure is the fully-qualified name of the UsersService's Update RPC.
	UsersServiceUpdateProcedure = "/users.v1.UsersService/Update"
	// UsersServiceDeleteProcedure is the fully-qualified name of the UsersService's Delete RPC.
	UsersServiceDeleteProcedure = "/users.v1.UsersService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	usersServiceServiceDescriptor       = v1.File_users_v1_users_proto.Services().ByName("UsersService")
	usersServiceCreateMethodDescriptor  = usersServiceServiceDescriptor.Methods().ByName("Create")
	usersServiceFindAllMethodDescriptor = usersServiceServiceDescriptor.Methods().ByName("FindAll")
	usersServiceFindMethodDescriptor    = usersServiceServiceDescriptor.Methods().ByName("Find")
	usersServiceUpdateMethodDescriptor  = usersServiceServiceDescriptor.Methods().ByName("Update")
	usersServiceDeleteMethodDescriptor  = usersServiceServiceDescriptor.Methods().ByName("Delete")
)

// UsersServiceClient is a client for the users.v1.UsersService service.
type UsersServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	FindAll(context.Context, *connect.Request[v1.FindAllRequest]) (*connect.Response[v1.FindAllResponse], error)
	Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewUsersServiceClient constructs a client for the users.v1.UsersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &usersServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+UsersServiceCreateProcedure,
			connect.WithSchema(usersServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		findAll: connect.NewClient[v1.FindAllRequest, v1.FindAllResponse](
			httpClient,
			baseURL+UsersServiceFindAllProcedure,
			connect.WithSchema(usersServiceFindAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		find: connect.NewClient[v1.FindRequest, v1.FindResponse](
			httpClient,
			baseURL+UsersServiceFindProcedure,
			connect.WithSchema(usersServiceFindMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+UsersServiceUpdateProcedure,
			connect.WithSchema(usersServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+UsersServiceDeleteProcedure,
			connect.WithSchema(usersServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// usersServiceClient implements UsersServiceClient.
type usersServiceClient struct {
	create  *connect.Client[v1.CreateRequest, v1.CreateResponse]
	findAll *connect.Client[v1.FindAllRequest, v1.FindAllResponse]
	find    *connect.Client[v1.FindRequest, v1.FindResponse]
	update  *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete  *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Create calls users.v1.UsersService.Create.
func (c *usersServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// FindAll calls users.v1.UsersService.FindAll.
func (c *usersServiceClient) FindAll(ctx context.Context, req *connect.Request[v1.FindAllRequest]) (*connect.Response[v1.FindAllResponse], error) {
	return c.findAll.CallUnary(ctx, req)
}

// Find calls users.v1.UsersService.Find.
func (c *usersServiceClient) Find(ctx context.Context, req *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// Update calls users.v1.UsersService.Update.
func (c *usersServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls users.v1.UsersService.Delete.
func (c *usersServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// UsersServiceHandler is an implementation of the users.v1.UsersService service.
type UsersServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	FindAll(context.Context, *connect.Request[v1.FindAllRequest]) (*connect.Response[v1.FindAllResponse], error)
	Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewUsersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsersServiceHandler(svc UsersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usersServiceCreateHandler := connect.NewUnaryHandler(
		UsersServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(usersServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceFindAllHandler := connect.NewUnaryHandler(
		UsersServiceFindAllProcedure,
		svc.FindAll,
		connect.WithSchema(usersServiceFindAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceFindHandler := connect.NewUnaryHandler(
		UsersServiceFindProcedure,
		svc.Find,
		connect.WithSchema(usersServiceFindMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceUpdateHandler := connect.NewUnaryHandler(
		UsersServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(usersServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	usersServiceDeleteHandler := connect.NewUnaryHandler(
		UsersServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(usersServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/users.v1.UsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsersServiceCreateProcedure:
			usersServiceCreateHandler.ServeHTTP(w, r)
		case UsersServiceFindAllProcedure:
			usersServiceFindAllHandler.ServeHTTP(w, r)
		case UsersServiceFindProcedure:
			usersServiceFindHandler.ServeHTTP(w, r)
		case UsersServiceUpdateProcedure:
			usersServiceUpdateHandler.ServeHTTP(w, r)
		case UsersServiceDeleteProcedure:
			usersServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsersServiceHandler struct{}

func (UnimplementedUsersServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.Create is not implemented"))
}

func (UnimplementedUsersServiceHandler) FindAll(context.Context, *connect.Request[v1.FindAllRequest]) (*connect.Response[v1.FindAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.FindAll is not implemented"))
}

func (UnimplementedUsersServiceHandler) Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.Find is not implemented"))
}

func (UnimplementedUsersServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.Update is not implemented"))
}

func (UnimplementedUsersServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("users.v1.UsersService.Delete is not implemented"))
}
